Chapter 01 - Inception

Q) What is Emmet?
ANS => Emmet is a plugin for text editors that provides fast and efficient ways to write HTML and CSS code. 
       It allows developers to write concise syntax that can be expanded into full HTML and CSS code, making it much faster 
       and easier to write complex code snippets. Emmet supports a wide range of text editors, including popular ones like 
       Sublime Text, Visual Studio Code, and Atom.

Q) Difference between a Library and Framework?
ANS => A library and a framework are both code libraries that developers can use to help speed up the development 
       process, but there are some key differences between the two.

      A library is a collection of pre-written code that developers can use to add specific functionality to their 
      applications. A library is typically used to perform specific tasks and provides a set of functions that can be 
      called by the developer to perform these tasks. Libraries are often written in a way that makes it easy to use and 
      plug in to existing code.

      A framework, on the other hand, is a more comprehensive solution that provides a set of rules and guidelines for 
      building and structuring an application. A framework provides a lot of the underlying structure for an application, 
      and the developer builds their application on top of the framework by following its conventions and filling in the 
      required details. The framework defines how the application should be structured and what it should do, and the 
      developer provides the specific implementation details.

      In short, a library provides specific functionality that can be used to build an application, while a framework 
      provides a structure and set of conventions that must be followed to build an application. The choice between using 
      a library or a framework will depend on the specific requirements of the project, as well as the preferences of the 
      developer.

Q) What is CDN? Why do we use it?
ANS => CDN stands for "Content Delivery Network." It is a network of servers located at various geographic locations 
       that work together to distribute content to users in a fast and efficient manner. The main purpose of a CDN is to 
       reduce the latency, or delay, in delivering content to users by caching a copy of the content on servers that are 
       closer to the user.

      We use CDNs because they help to improve the performance and speed of websites and other online applications. When a 
      user requests content, the CDN can quickly serve the cached copy of the content from a nearby server, instead of the 
      origin server, which can be located far away and result in longer load times. This can greatly improve the user 
      experience by reducing page load times and minimizing downtime in the event of traffic spikes or network outages.

     In addition to performance improvements, CDNs can also help to reduce the burden on the origin server by caching and 
     serving a large portion of the content, and can also provide security benefits by offering features such as DDoS 
     protection and SSL encryption.

Q) Why is React known as React?
ANS => React is known as React because it was developed and maintained by Facebook and the name "React" is a 
       shortened form of the original name "Reactive". The library was first released in 2013 and was designed to 
       address some of the challenges faced by Facebook in building complex user interfaces. The name "React" was 
       chosen because the library was designed to provide a reactive and efficient way to update the user interface 
       in response to changing data.

      React is based on a concept called "the virtual DOM", which allows for efficient updates to the user interface 
      by only rendering the necessary changes instead of re-rendering the entire page. This approach makes it 
      possible to build fast, complex user interfaces that can handle large amounts of data and updates with ease.

      Over the years, React has become one of the most popular JavaScript libraries for building user interfaces, 
      and its popularity has only grown as more and more developers have adopted it for their projects. Today, 
      React is used by many large companies, including Facebook, Netflix, and Airbnb, and is widely regarded as one 
      of the best tools for building dynamic, high-performance user interfaces.





Q) What is crossorigin in script tag?
ANS => The crossorigin attribute in a <script> tag is used to specify the type of credentials to be sent when 
       requesting a resource from a different origin (i.e., a different domain or protocol). It allows a web page to 
       make requests to a different origin and retrieve resources, such as scripts, images, and stylesheets, while 
       still maintaining the security and privacy of the user's data.

       The crossorigin attribute accepts two values: anonymous and use-credentials. The value anonymous indicates 
       that the browser should not send any credentials (such as cookies or HTTP authentication) when making the 
       request. The value use-credentials indicates that the browser should send the user's credentials with the 
       request.

Q) What is diference between React and ReactDOM
ANS => React and ReactDOM are two separate libraries developed by Facebook for building user interfaces.

       React is a JavaScript library for building reusable UI components. It provides a way to define the structure 
       and behavior of these components in a declarative and efficient manner, allowing developers to build complex 
       user interfaces with ease. React is based on the concept of the virtual DOM, which allows for efficient 
       updates to the user interface by only rendering the necessary changes.

       ReactDOM, on the other hand, is a separate library that provides the necessary API for rendering React 
       components in a browser. It acts as a bridge between React and the DOM, the standard API for manipulating 
       HTML documents in a browser. ReactDOM provides methods for rendering components, handling events, and 
       updating the DOM efficiently.

       In other words, React is a library for building UI components, and ReactDOM is a library for rendering those 
       components in the browser. They are two separate libraries because the same components can be rendered in 
       different environments, such as the browser, a native mobile app, or a server-side environment. By separating 
       the logic for building components from the logic for rendering them, React and ReactDOM allow for greater 
       flexibility and reuse in building web applications.

Q) What is difference between react.development.js and react.production.js files via CDN?
ANS => The react.development.js and react.production.js files are different builds of the React library that are 
       optimized for different stages of the development process.

       The react.development.js file is intended for use during the development of a web application. It includes 
       helpful development-only features, such as warnings and error messages, that help developers catch and debug 
       issues. This build is typically larger in size and may run slower than the production build, but it provides 
       a more detailed understanding of what's happening in the code.

       The react.production.js file, on the other hand, is intended for use in a production environment. It is a 
       smaller, optimized version of the library that has been stripped of development-only features and has been 
       minified to reduce its file size. This build is designed to run faster and to be more efficient in a production
       environment, where speed and performance are crucial.

       When you include React in a web page via a CDN, you can choose which version of the library to use based on 
       the stage of development. In a development environment, you would typically use the react.development.js file,
       while in a production environment, you would use the react.production.js file. The choice of which file to use
      can be made by changing the URL in the script tag that includes the React library.

Q) What is async and defer?
ANS => The async and defer attributes are used to specify the loading behavior of a <script> tag in an HTML document.
       They allow you to control the order in which scripts are loaded and executed, and can help improve the 
       performance and loading times of a web page.

       async: The async attribute is used to specify that a script should be loaded asynchronously, meaning that it 
       will be loaded in the background while the rest of the page continues to load and render. As soon as the 
       script has finished loading, it will be executed. This can help improve the performance of a web page by 
       allowing other resources, such as images and stylesheets, to be loaded in parallel with the script.

       defer: The defer attribute is used to specify that a script should be loaded and executed after the rest of 
       the page has finished loading. This can be useful when you want to ensure that a script is executed after 
       other resources, such as images and stylesheets, have finished loading. Unlike async, the defer attribute 
       guarantees that the scripts will be executed in the order in which they appear in the HTML document.

      It's important to note that async and defer are only supported by modern browsers, and are not supported in 
      all older browsers. When using these attributes, it's a good idea to test your web page in a variety of 
      browsers to ensure that the behavior is consistent and that the scripts are executed correctly.

